// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password_hash String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  tasks      Task[]
  categories Category[]
  tags       Tag[]

  @@map("users")
}

model Category {
  id         String   @id @default(uuid())
  name       String
  color      String?
  user_id    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user  User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tasks Task[]

  @@map("categories")
}

model Tag {
  id         String   @id @default(uuid())
  name       String
  color      String?
  user_id    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  taskTags TaskTag[]

  @@map("tags")
}

model Task {
  id           String    @id @default(uuid())
  title        String
  description  String?
  completed    Boolean   @default(false)
  priority     Priority  @default(MEDIUM)
  due_date     DateTime?
  completed_at DateTime?
  user_id      String
  category_id  String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  // Relations
  user     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  category Category  @relation(fields: [category_id], references: [id], onDelete: Restrict)
  taskTags TaskTag[]

  @@map("tasks")
}

model TaskTag {
  id      String @id @default(uuid())
  task_id String
  tag_id  String

  // Relations
  task Task @relation(fields: [task_id], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@unique([task_id, tag_id])
  @@map("task_tags")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}
